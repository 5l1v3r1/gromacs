#!/usr/bin/perl -w

# This script installs front-ends corresponding to the *old*
# program names, that in reality call gmx-ana

$bindir = shift || die("Need argument bindir");

@progs = ( "analyze",   "anaeig",  "angle",      "bond", 
	   "bundle",    "chi",     "cluster",    "confrms", 
	   "covar",     "density", "dielectric", "dih",  
	   "dipoles",   "disre",   "dist",       "dyndom", 
	   "enemat",    "energy",  "lie",        "filter", 
	   "gyrate",    "h2order", "hbond",      "helix", 
	   "mindist",   "msd",     "morph",      "nmeig", 
	   "nmens",     "order",   "potential",  "rama", 
	   "rdf",       "rms",     "rmsdist",    "rmsf", 
	   "rotacf",    "saltbr",  "sas",        "sgangle", 
	   "sorient",   "tcaf",    "traj",       "velacc", 
	   "clustsize", "mdmat" );

$incfile = "gmx-ana.h";
open(INC,">$incfile") || die ("Can not open $incfile for writing");
printf (INC "/* This file was generated by gmx-ana.pl. Do not modify */\n");
printf (INC "#ifndef _gmx_ana_h\n#define _gmx_ana_h\n\n");

$main = "gmx-ana.c";

open(ANA,">$main") || die ("Can not open $main for writing");
printf ANA <<EOF;
/* This file was generated by a gmx-ana.pl. Do not modify */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "macros.h"
#include "copyrite.h"
#include "gmx-ana.h"

typedef int (*ana_func)(int argc,char *argv[]);
typedef struct {
  char *name;
  ana_func f;
} t_ana_func;

int main(int argc,char *argv[]) 
{
  int i,j,k; 

  t_ana_func af[] = {
EOF

mkdir("tmp");
$pcount=0;
foreach $p ( @progs ) {
    $oldprog = "$bindir/g_$p";
    open(PPP,">$oldprog") || die ("Can not open $oldprog for writing");
    printf (PPP "#!/bin/csh -f\n");
    printf (PPP "gmx-ana -type $p \$argv\n");
    close(PPP);
    chmod(0755,$oldprog);
    printf (INC "extern int gmx_$p(int argc,char *argv[]);\n\n");
    printf (ANA "    { \"$p\", gmx_$p }");
    if ($pcount == $#progs ) {
	printf (ANA "\n  };\n\n");
	printf (ANA "#define NAF asize(af)\n");
    }
    else {
	printf (ANA ",\n");
    }
    $pcount++;
}

printf(INC "#endif\n/* _gmx_ana_h */\n");
close(INC);

printf ANA <<EOK;
  for(i=1; (i<argc-1); i++) {
      if (strcmp(argv[i],"-type") == 0) {
	  for(j=0; (j<NAF); j++) {
	      if (strcmp(af[j].name,argv[i+1]) == 0) {
		  for(k=i+2; (k<argc); k++)
		      argv[k-2] = argv[k];
		  return af[j].f(argc-2,argv);
	      }
	  }
	  if (j == NAF) {
	      fatal_error(0,"Invalid argument for -type; %%s",argv[i+1]);
	  }
      }
  }
  CopyRight(stderr,argv[0]);

  fprintf(stderr,"Usage: %%s -type [",argv[0]);
  for(i=0; (i<NAF-1); i++) 
    fprintf(stderr," %%s |",af[i].name);
  fprintf(stderr," %%s ]\\n",af[i].name);
  
  return -1;
}
EOK
close(ANA);
