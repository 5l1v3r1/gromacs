#!/usr/bin/perl -w

# This script installs front-ends corresponding to the *old*
# program names, that in reality call gmx-ana


if ($#ARGV < 0) {
    die ("Usage: gmx-ana.pl programs\n");
}


$incfile = "gmx-ana.h";
open(INC,">$incfile") || die ("Can not open $incfile for writing");
printf (INC "/* This file was generated by gmx-ana.pl. Do not modify */\n");
printf (INC "#ifndef _gmx_ana_h\n#define _gmx_ana_h\n\n");

$main = "gmx-ana.c";

open(ANA,">$main") || die ("Can not open $main for writing");
printf ANA <<EOF;
/* This file was generated by a gmx-ana.pl. Do not modify */
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "macros.h"
#include "copyrite.h"
#include "gmx-ana.h"

typedef int (*ana_func)(int argc,char *argv[]);
typedef struct {
  char *name;
  ana_func f;
} t_ana_func;

int main(int argc,char *argv[]) 
{
  int i,j,k; 

  t_ana_func af[] = {
EOF

$argc = 0;
foreach $p ( @ARGV ) {
    $oldprog = $p;
    if (index($p,"g_") >= 0) {
	@kkk = split ("g_",$p);
	$ppp = "gmx_" . $kkk[1];
	    
	open(PPP,">$p") || die ("Can not open $p for writing");
	print PPP "#!/bin/sh\n";
	print PPP "# Select which mode of gmx-ana to use in this script\n";
	print PPP "type=$kkk[1]\n";
	print PPP "# Create gmx-ana path from our name. Two cases:\n";
	print PPP "# 1. \$0 contains slash = a full or relative path\n";
	print PPP "# 2. \$0 without slash = gmx-ana must be in our path\n";
	print PPP "case \$0 in\n";
	print PPP "  */*) gmxana=\${0%/*}/gmx-ana ;;\n";
        print PPP "  *)   gmxana=gmx-ana ;;\n";
	print PPP "esac\n";
	print PPP "# Check that the file is there\n";
	print PPP "if [ ! -x \$gmxana ]; then\n";
        print PPP "  echo Cannot find executable \$gmxana\n";
        print PPP "    exit\n";
        print PPP "fi\n";
	print PPP "\$gmxana -type \$type \$*\n";
	close(PPP);
	chmod(0755,$oldprog);

	# Dos batch file (actually, WINNT and later...)
	open(BAT,">${p}.bat") || die ("Can not open $p for writing");
	print BAT "\@echo off\n";
	print BAT "set DIRNAME=%~dp0%\n";
	print BAT "REM BAT files only see args 1-9. We use shift to get all.\n";
	print BAT "set ARGS=\n";
	print BAT ":loop\n";
	print BAT "if [%1] == [] goto endloop\n";
	print BAT "set ARGS=%ARGS% %1\n";
	print BAT "shift\n";
	print BAT "goto loop\n";
	print BAT ":endloop\n";
	print BAT "%DIRNAME%gmx-ana.exe -type $kkk[1] %ARGS%\n";
	close(BAT);

	printf (INC "extern int $ppp(int argc,char *argv[]);\n\n");
	printf (ANA "    { \"$kkk[1]\", $ppp }");
	if ($argc < $#ARGV) {
	    printf (ANA ",\n");
	}
    }
    $argc++;
}
printf (ANA "\n  };\n\n");
printf (ANA "#define NAF asize(af)\n");

printf(INC "#endif\n/* _gmx_ana_h */\n");
close(INC);

printf ANA <<EOK;
  for(i=1; (i<argc-1); i++) {
      if (strcmp(argv[i],"-type") == 0) {
	  for(j=0; (j<NAF); j++) {
	      if (strcmp(af[j].name,argv[i+1]) == 0) {
		  for(k=i+2; (k<argc); k++)
		      argv[k-2] = argv[k];
		  return af[j].f(argc-2,argv);
	      }
	  }
	  if (j == NAF) {
	      fatal_error(0,"Invalid argument for -type; %%s",argv[i+1]);
	  }
      }
  }
  CopyRight(stderr,argv[0]);

  fprintf(stderr,"Usage: %%s -type [",argv[0]);
  for(i=0; (i<NAF-1); i++) 
    fprintf(stderr," %%s |",af[i].name);
  fprintf(stderr," %%s ]\\n",af[i].name);
  
  return -1;
}
EOK
close(ANA);
