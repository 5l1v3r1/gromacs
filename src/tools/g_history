#!/usr/bin/python
# -*- coding: utf-8 -*-

#TODO: 
#in gmx:
#changed any fopen to ffopen? if so error msg handling ok?
#
#here:
#sorting
#group input files by found/not found
#wrapper for external tools
#
#BUGS:

from optparse import OptionParser
import os,hashlib
#OptParse -f file, -h history files/directories

parser = OptionParser()
parser.add_option("-f", "--file", dest="filename", 
                     help="print history for FILE", metavar="FILE")
parser.add_option("-d", "--hist", dest="history", 
                     help="additional folder/files to search for history,\
           multiple seperated by :", metavar="PATH")

(options, pargs) = parser.parse_args()

out_files={}
out_fnms=[]  
cmds=[]

#appends to d[key] the value val
#d: dict
#returns: None
def addToDict(d, key, val):
    if d.has_key(key):
        d[key]+=[val]
    else:
        d[key]=[val]

#read in history file f and add all cmds to cmds and output files to out_files
#returns: None
def read_history(f):
    global cmds, out_fnms
    args = {}
    for l in file(f):
        l=l.strip()
        opt = l[:3]
        val = l[5:]
        if l=="":
            if args!={}: cmds+=[args]
            args={}
        else:
            addToDict(args,opt,val)
        if opt=="OUT":
            (fn,md5)=val.split(" ")
            addToDict(out_files,md5,len(cmds))
            if not os.path.isabs(fn):
                fn=os.path.join(args['PWD'][0],fn)
            out_fnms+=[[fn,len(cmds)]]
    if args!={}: cmds+=[args]            

#search for history files in standard location and in opt
#returns: list of history files
def search_history(opt):
    def_file=".gmx_history"
    paths = [def_file,os.path.join("~",def_file)]
    if opt!=None: paths+=opt.split(":")
    ret = []
    for i in paths:
        i = os.path.expanduser(i)
        idef = os.path.join(i,def_file)
        if os.path.isfile(i):
            ret+=[i]
        elif os.path.isfile(idef):
            ret+=[idef]
    return ret

#compute md5 for file f
#returns: md5sum
def md5sum(f):
    c = file(f).read()
    return hashlib.md5(c).hexdigest()
    
#find all commands used to generate file with md5sum md5
#returns: list of cmds, list of input files without command
def find_cmds(md5):
    #sort by:
    #all files exist
    #orig file exist
    #lastest command
    cmd_list=[]
    input_list=[]
    if out_files.has_key(md5):
        cmdidx = out_files[md5][-1] #current: no sorting: just last read
        args = cmds[cmdidx]      
        for f in args["IN "]:
            (fn,md5)=f.split(" ")
            (cmd,input)=find_cmds(md5)
            if cmd!=[]:
                cmd_list+=cmd
                input_list+=input
            else:
                input_list+=[f]
        cmd_list+=[args["CMD"][0]]
    return cmd_list,input_list
      

def print_history(md5):
    cmd,input=find_cmds(md5)
    if len(cmd)>1:
        print "Required input (files without known history):"
        for l in input:
            (fn,md5)=l.split(" ")
            print l,
            if os.path.isfile(fn):
                print "   (file exists,",
                nmd5=md5sum(fn)  #TODO: abspath
                if nmd5==md5:
                    print "unchanged)"
                else:
                    print "BUT changed)"
            else:
                print "   (file not found)"
        print "Commands:"
        for l in cmd:
            print l
    else:
        print "No history found for %s."%(options.filename,)
  

hist_files = search_history(options.history)
for hist_file in hist_files:
    read_history(hist_file)

if options.filename!=None:
    if os.path.isfile(options.filename):
      md5 = md5sum(options.filename)
      print "md5sum of %s is %s."%(options.filename, md5)
      print_history(md5)
    else:
      print "File %s not found. Cannot compute checksum."%(options.filename,)
      abspath = os.path.abspath(options.filename)
      nfound=0
      for l in out_fnms:
          if l[0]==abspath:
              arg = cmds[l[1]]
              for o in arg['OUT']:
                  fn,md5=o.split(" ")
                  if os.path.basename(fn)==os.path.basename(abspath):
                      nfound+=1
                      print "Found output: %s %s"%(abspath,md5)
                      print "Generated by:",
                      print arg['CMD'][0]
                      print "By:",arg['BY '][0]
                      print "Print full history?"
                      inp = raw_input()
                      if inp=='y' or inp=='Y':
                          print_history(md5)
                      break
              else:
                  print "BUG: found in out_fnms but not in cmds"
      if nfound==0:
          print "No file found matching: %s."%(abspath,)

	

#print cmds[-1]
#print out_files

#print options.filename
