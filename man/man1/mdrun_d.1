.TH mdrun_d 1 "Thu 16 Oct 2008"
.SH NAME
mdrun_d
.B VERSION 3.3.99_development_20071104
.SH SYNOPSIS
\f3mdrun_d\fP
.BI "-s" " topol.tpr "
.BI "-o" " traj.trr "
.BI "-x" " traj.xtc "
.BI "-c" " confout.gro "
.BI "-e" " ener.edr "
.BI "-g" " md.log "
.BI "-dgdl" " dgdl.xvg "
.BI "-field" " field.xvg "
.BI "-table" " table.xvg "
.BI "-tablep" " tablep.xvg "
.BI "-tableb" " table.xvg "
.BI "-rerun" " rerun.xtc "
.BI "-tpi" " tpi.xvg "
.BI "-tpid" " tpidist.xvg "
.BI "-ei" " sam.edi "
.BI "-eo" " sam.edo "
.BI "-j" " wham.gct "
.BI "-jo" " bam.gct "
.BI "-ffout" " gct.xvg "
.BI "-devout" " deviatie.xvg "
.BI "-runav" " runaver.xvg "
.BI "-px" " pullx.xvg "
.BI "-pf" " pullf.xvg "
.BI "-mtx" " nm.mtx "
.BI "-dn" " dipole.ndx "
.BI "-[no]h" ""
.BI "-nice" " int "
.BI "-deffnm" " string "
.BI "-[no]xvgr" ""
.BI "-[no]pd" ""
.BI "-dd" " vector "
.BI "-nt" " int "
.BI "-npme" " int "
.BI "-ddorder" " enum "
.BI "-rdd" " real "
.BI "-rcon" " real "
.BI "-[no]dlb" ""
.BI "-[no]sum" ""
.BI "-[no]v" ""
.BI "-[no]compact" ""
.BI "-[no]seppot" ""
.BI "-[no]reprod" ""
.BI "-multi" " int "
.BI "-replex" " int "
.BI "-reseed" " int "
.BI "-[no]glas" ""
.BI "-[no]ionize" ""
.SH DESCRIPTION
The mdrun program is the main computational chemistry engine
within GROMACS. Obviously, it performs Molecular Dynamics simulations,
but it can also perform Stochastic Dynamics, Energy Minimization,
test particle insertion or (re)calculation of energies.
Normal mode analysis is another option. In this case mdrun
builds a Hessian matrix from single conformation.
For usual Normal Modes-like calculations, make sure that
the structure provided is properly energy-minimized.
The generated matrix can be diagonalized by g_nmeig.


The mdrun program reads the run input file (
.B -s
)
and distributes the topology over nodes if needed.
mdrun produces at least four output files.
A single log file (
.B -g
) is written, unless the option

.B -seppot
is used, in which case each node writes a log file.
The trajectory file (
.B -o
), contains coordinates, velocities and
optionally forces.
The structure file (
.B -c
) contains the coordinates and
velocities of the last step.
The energy file (
.B -e
) contains energies, the temperature,
pressure, etc, a lot of these things are also printed in the log file.
Optionally coordinates can be written to a compressed trajectory file
(
.B -x
).


The option 
.B -dgdl
is only used when free energy perturbation is
turned on.


When mdrun is started using MPI with more than 1 node, parallelization
is used. By default domain decomposition is used, unless the 
.B -pd

option is set, which selects particle decomposition.


With domain decomposition, the spatial decomposition can be set
with option 
.B -dd
. By default mdrun selects a good decomposition.
The user only needs to change this when there are errors due to missing
interactions, or when the system is very inhomogeneous.
When PME is used, separate nodes can be assigned to do only the PME
calculation; this is computationally more efficient starting at
about 12 nodes. The number of PME nodes is set with option

.B -npme
, this can not be more than half of the nodes.
By default mdrun makes a guess for the number of PME
nodes when the number of nodes is 12 or larger or when the PME grid
x or y dimension is not divisible by the number of nodes, but the user
should optimize npme. Performance statistics on this issue are written
at the end of the log file.
Dynamic load balancing can be turned on with the option 
.B -dlb
,
which can give a significant performance improvement,
especially for inhomogeneous systems. The only disadvantage of
dynamic load balancing is that runs are no longer binary reproducible,
but in most cases this is not important.
All distances required for two-body bonded interactions should be within
the non-bonded cut-off distance;
all distances required for multi-body bonded interactions should be
within the smallest cell size. If this is not the case mdrun terminates
with an error message. By default mdrun sets the minimum cell size to
half the cut-off distance or the maximum distance required
for constraints, whichever is larger.
Option 
.B -rdd
can be used to set the allowed distance for
multi-body bonded interactions or also for two-body bonded interactions
when 
.B -rdd
is larger than the non-bonded cut-off.
With dynamic load balancing option 
.B -rdd
also sets
the lower limit for the domain decomposition cell sizes.
When constraints are present, option [TT-rcon
influences
the cell size limit as well.
Atoms connected by NC constraints, where NC is the LINCS order plus 1,
should not be beyond the smallest cell size. A error message is
generated when this happens and the user should change the decomposition
or decrease the LINCS order and increase the number of LINCS iterations.
By default mdrun estimates the minimum cell size required for P-LINCS
in a conservative fashion. For high parallelization it can be useful
to set the distance required for P-LINCS with the option 
.B -rcon
.
Finally the option 
.B -nosum
can be used to only sum the energies
at every neighbor search step. This can improve performance for highly
parallel simulations, where this global communication step becomes
the bottleneck. This option is currently not allowed when
an extended ensemble thermostat or barostat is used.


With 
.B -rerun
an input trajectory can be given for which 
forces and energies will be (re)calculated. Neighbor searching will be
performed for every frame, unless 
.B nstlist
is zero
(see the 
.B .mdp
file).


ED (essential dynamics) sampling is switched on by using the 
.B -ei

flag followed by an 
.B .edi
file.
The 
.B .edi
file can be produced using options in the essdyn
menu of the WHAT IF program. mdrun produces a 
.B .edo
file that
contains projections of positions, velocities and forces onto selected
eigenvectors.


When user-defined potential functions have been selected in the

.B .mdp
file the 
.B -table
option is used to pass mdrun
a formatted table with potential functions. The file is read from
either the current directory or from the GMXLIB directory.
A number of pre-formatted tables are presented in the GMXLIB dir,
for 6-8, 6-9, 6-10, 6-11, 6-12 Lennard Jones potentials with
normal Coulomb.
When pair interactions are present a separate table for pair interaction
functions is read using the 
.B -tablep
option.


When tabulated bonded functions are present in the topology,
interaction functions are read using the 
.B -tableb
option.
For each different tabulated interaction type the table file name is
modified in a different way: before the file extension an underscore is
appended, then a b for bonds, an a for angles or a d for dihedrals
and finally the table number of the interaction type.


The options 
.B -pi
, 
.B -po
, 
.B -pd
, 
.B -pn
are used
for potential of mean force calculations and umbrella sampling.
See manual.


With 
.B -multi
multiple systems are simulated in parallel.
As many input files are required as the number of systems.
The system number is appended to the run input and each output filename,
for instance topol.tpr becomes topol0.tpr, topol1.tpr etc.
The number of nodes per system is the total number of nodes
divided by the number of systems.
One use of this option is for NMR refinement: when distance
or orientation restraints are present these can be ensemble averaged
over all the systems.


With 
.B -replex
replica exchange is attempted every given number
of steps. The number of replicas is set with the 
.B -multi
option,
see above.
All run input files should use a different coupling temperature,
the order of the files is not important. The random seed is set with

.B -reseed
. The velocities are scaled and neighbor searching
is performed after every exchange.


Finally some experimental algorithms can be tested when the
appropriate options have been given. Currently under
investigation are: polarizability, glass simulations
and X-Ray bombardments.


When mdrun receives a TERM signal, it will set nsteps to the current
step plus one. When mdrun receives a USR1 signal, it will set nsteps
to the next multiple of nstxout after the current step.
In both cases all the usual output will be written to file.
When running with MPI, a signal to one of the mdrun processes
is sufficient, this signal should not be sent to mpirun or
the mdrun process that is the parent of the others.
.SH FILES
.BI "-s" " topol.tpr" 
.B Input
 Generic run input: tpr tpb tpa xml 

.BI "-o" " traj.trr" 
.B Output
 Full precision trajectory: trr trj 

.BI "-x" " traj.xtc" 
.B Output, Opt.
 Compressed trajectory (portable xdr format) 

.BI "-c" " confout.gro" 
.B Output
 Generic structure: gro g96 pdb xml 

.BI "-e" " ener.edr" 
.B Output
 Generic energy: edr ene 

.BI "-g" " md.log" 
.B Output
 Log file 

.BI "-dgdl" " dgdl.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-field" " field.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-table" " table.xvg" 
.B Input, Opt.
 xvgr/xmgr file 

.BI "-tablep" " tablep.xvg" 
.B Input, Opt.
 xvgr/xmgr file 

.BI "-tableb" " table.xvg" 
.B Input, Opt.
 xvgr/xmgr file 

.BI "-rerun" " rerun.xtc" 
.B Input, Opt.
 Generic trajectory: xtc trr trj gro g96 pdb 

.BI "-tpi" " tpi.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-tpid" " tpidist.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-ei" " sam.edi" 
.B Input, Opt.
 ED sampling input 

.BI "-eo" " sam.edo" 
.B Output, Opt.
 ED sampling output 

.BI "-j" " wham.gct" 
.B Input, Opt.
 General coupling stuff 

.BI "-jo" " bam.gct" 
.B Output, Opt.
 General coupling stuff 

.BI "-ffout" " gct.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-devout" " deviatie.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-runav" " runaver.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-px" " pullx.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-pf" " pullf.xvg" 
.B Output, Opt.
 xvgr/xmgr file 

.BI "-mtx" " nm.mtx" 
.B Output, Opt.
 Hessian matrix 

.BI "-dn" " dipole.ndx" 
.B Output, Opt.
 Index file 

.SH OTHER OPTIONS
.BI "-[no]h"  "no    "
 Print help info and quit

.BI "-nice"  " int" " 19" 
 Set the nicelevel

.BI "-deffnm"  " string" " " 
 Set the default filename for all file options

.BI "-[no]xvgr"  "yes   "
 Add specific codes (legends etc.) in the output xvg files for the xmgrace program

.BI "-[no]pd"  "no    "
 Use particle decompostion

.BI "-dd"  " vector" " 0 0 0" 
 Domain decomposition grid, 0 is optimize

.BI "-nt"  " int" " 1" 
 Number of threads to start on each node

.BI "-npme"  " int" " -1" 
 Number of separate nodes to be used for PME, -1 is guess

.BI "-ddorder"  " enum" " interleave" 
 DD node order: 
.B interleave
, 
.B pp_pme
or 
.B cartesian


.BI "-rdd"  " real" " 0     " 
 The minimum distance for DD communication (nm)

.BI "-rcon"  " real" " 0     " 
 Maximum distance for P-LINCS (nm), 0 is estimate

.BI "-[no]dlb"  "no    "
 Use dynamic load balancing (only with DD)

.BI "-[no]sum"  "yes   "
 Sum the energies at every step

.BI "-[no]v"  "no    "
 Be loud and noisy

.BI "-[no]compact"  "yes   "
 Write a compact log file

.BI "-[no]seppot"  "no    "
 Write separate V and dVdl terms for each interaction type and node to the log file(s)

.BI "-[no]reprod"  "no    "
 Try to avoid optimizations that affect binary reproducibility

.BI "-multi"  " int" " 0" 
 Do multiple simulations in parallel

.BI "-replex"  " int" " 0" 
 Attempt replica exchange every  steps

.BI "-reseed"  " int" " -1" 
 Seed for replica exchange, -1 is generate a seed

.BI "-[no]glas"  "no    "
 Do glass simulation with special long range corrections

.BI "-[no]ionize"  "no    "
 Do a simulation including the effect of an X-Ray bombardment on your system

